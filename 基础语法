#include<iostream> //输入输出头文件
using namespace std;//直接进入std空间
cout<< cin>>  <<endl //输入输出 结束
**\#define** 宏常量： #define 常量名 常量值
**const**修饰的变量 const 数据类型 常量名 = 常量值
| **数据类型**        | **占用空间**                                    | 取值范围         |
| ------------------- | ----------------------------------------------- | ---------------- |
| short(短整型)       | 2字节                                           | (-2^15 ~ 2^15-1) |
| int(整型)           | 4字节                                           | (-2^31 ~ 2^31-1) |
| long(长整形)        | Windows为4字节，Linux为4字节(32位)，8字节(64位) | (-2^31 ~ 2^31-1) |
| long long(长长整形) | 8字节                                           | (-2^63 ~ 2^63-1) |
| **数据类型** | **占用空间** | **有效数字范围** |
| ------------ | ------------ | ---------------- |
| float        | 4字节        | 7位有效数字      |
| double       | 8字节        | 15～16位有效数字 |
A 的ASCII为65
a 的ASCII为97
sizeof( 数据类型 / 变量)//数据类型的所占大小
\n	换行符（New Line）	让文本从下一行开始显示（如日志换行、代码中换行输出）
\t	制表符（Tab）	实现文本对齐（如表格列分隔、缩进），等效于按一次 Tab 键
\r	回车符（Carriage Return）	让光标回到当前行的开头（常与 \n 组合为 \r\n 表示 Windows 下的换行）
\\	反斜杠本身（Backslash）	当需要在文本中显示 \ 时使用（如文件路径 C:\\Users\\xxx）
\"	双引号（Double Quote）	在被双引号包裹的字符串中，显示双引号（如 "He said \"Hello\""）
\'	单引号（Single Quote）	在被单引号包裹的字符串中，显示单引号（如 'It\'s a cat'）
！ && || 与或非 
if（else if） else  //假设
表达式1 ? 表达式2 ：表达式3 //如果表达式1的值为真，执行表达式2，并返回表达式2的结果；如果表达式1的值为假，执行表达式3，并返回表达式3的结果。
switch case 	default: //分支选择
while do...while //循环do...while是先运行后循环 while 满足条件运行不满足条件种植
for //循环 按照数列循环  
break //中断循环
continue //中断本次循环
goto  标记 //标记存在则从goto处跳转到标记处
数组定义方法
1. ` 数据类型  数组名[ 数组长度 ]; `
2. `数据类型  数组名[ 数组长度 ] = { 值1，值2 ...};`
3. `数据类型  数组名[ ] = { 值1，值2 ...};`
二维
1. ` 数据类型  数组名[ 行数 ][ 列数 ]; `
2. `数据类型  数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };`
3. `数据类型  数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};`
4. ` 数据类型  数组名[  ][ 列数 ] = { 数据1，数据2，数据3，数据4};`
函数
返回值类型 函数名 （参数列表）
{
       函数体语句
       return表达式
}
调用  函数名（参数）
函数分文件编写一般有4个步骤

1. 创建后缀名为.h的头文件  
2. 创建后缀名为.cpp的源文件
3. 在头文件中写函数的声明
4. 在源文件中写函数的定义
